mu_chap_x
sum(N/sum(N)*xbar_x)
mu_chap_x = N/sum(N)*xbar_x
mu_chap_x
xbar_x
N/sum(N)
N
sums$x/N
xbar_x = sums$x/sum(N)
xbar_x
sums$x/N
sums$x/sum(N)
xbar_x = sums$x/sum(N)
mu_chap_x = N/sum(N)*xbar_x
sum(sums$x*pesos_strat)
xbar_x = sum(sums$x*pesos_strat)/sum(N)
# Estimando o número medio de alunos por escola
svymean(~enroll, strat_design)
xbar_x = sum(sums$x*pesos_strat)/sum(N)
mu_chap_x = N/sum(N)*xbar_x
mu_chap_x = sum(N/sum(N)*xbar_x)
T_k = sum(sums$x*pesos_strat) # DEU CERTO!!!
pesos_strat = N_k/n_k
N_k = c(4421, 755, 1018)
n_k = c(100, 50, 50)
pesos_strat = N_k/n_k
aux = data.frame(enroll = apistrat$enroll, stype = apistrat$stype)
sums = aggregate(aux$enroll, by = list(Category = aux$stype), FUN = sum)
T_k = sum(sums$x*pesos_strat) # DEU CERTO!!!
xbar_x = T_k/sum(N_k)
xbar_x = T_k/sum(N_k)
mu_chap_x = sum(N_k/sum(N)*xbar_x)
T_k
sum(N_k)
T_k
sums
xbar_x = sums$x/N_k
mu_chap_x = sum(N_k/sum(N)*xbar_x)
sums$x/N_k
sums$x
xbar_x = sums$x/n_k
xbar_x
mu_chap_x = sum(N_k/sum(N)*xbar_x)
# Estimando o número medio de alunos por escola
svymean(~enroll, strat_design)
N_k/sum(N)*xbar_x
# Estimando o desempenho acadêmico nos anos 2000 e 1999
svymean(~api00+api99, strat_design)
# Estrato das escolas elementares
srs_designE <- subset(strat_design, stype=="E")
# Estimando o desempenho acadêmico nos anos 2000 e 1999
svymean(~api00+api99, srs_designE)
# Estrato das middle school
srs_designM <- subset(strat_design, stype=="M")
svymean(~api00+api99, srs_designM)
# Estrato das high school
srs_designH <- subset(strat_design, stype=="H")
svymean(~api00+api99, srs_designH)
# Desempenho acadêmico por tipo de escola
svyby(~api00+api99, ~stype, svymean, design=strat_design)
require(survey)
data(api)
View(apiclus1)
?api
?svydesign
View(apiclus1)
# one-stage cluster sample
dclus1<-svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
svymean(~api00 + api99, dclus1)
svytotal(~enroll, dclus1)
# two-stage cluster sample
dclus2 <- svydesign(id = ~dnum + snum, fpc = ~fpc1 + fpc2, data = apiclus2)
svymean(~ api00 + api99, dclus2)
svymean(~api00 + api99, dclus1)
View(apiclus2)
unique(apiclus2$pw)
length(unique(apiclus2$pw))
length(unique(apiclus2$dnum))
svytotal(~enroll, dclus2, na.rm=TRUE)
set.seed(1234)
n = 200 # tamanho da amostra
x = runif(200, 2, 40) # U(2, 40)
beta = c(60,-0.05) # valor verdadeiro dos coeficientes
e = rnorm(n, sd = 2)
y = beta[1]*exp(beta[2]*x) + e # y = b0e^b1X + e
# grandiente
f1 = function(b,x,y){
rbind(-2*sum((y - b[1]*exp(b[2]*x))*exp(b[2]*x)),
-2*sum((y - b[1]*exp(b[2]*x))*x*b[1]*exp(b[2]*x))
)
}
# hessiana
f2 = function(b,x,y){
A = matrix(0, ncol = 2,nrow = 2)
A[1,1] = sum(-2*exp(b[2]*x)*(-exp(b[2]*x)))
A[2,2] = sum(2*(-b[1]*x*exp(b[2]*x))*(-b[1]*x*exp(b[2]*x))) + sum(2*(y-b[1]*exp(b[2]*x))*(-b[1]*x^2*exp(b[2]*x)))
A[2,1] = A[1,2] = sum(2*(-b[1]*x*exp(b[2]*x))*(-exp(b[2]*x))) + sum(2*(y-b[1]*exp(b[2]*x))*(-x*exp(b[2]*x)))
return(A)
}
# newton raphson
f.obj = function(b, x, y){
sum((y - b[1]*exp(b[2]*x))^2)
}
nr.optim = function(x0, f1, f2, epslon = 0.0001, mini = TRUE,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(f2(x0, x, y))%*%(f1(x0, x, y))
cc = t(f1(x1, x, y))%*%f1(x1, x, y) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
cd = f.obj(x1, x, y) - f.obj(x0, x, y)
if((mini & cd > 0) | (!mini & cd < 0)){
stop("algoritmo na direcao errada -")
}
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z)
}
nr.optim(x0 = rbind(40, 0), f1, f2, epslon = 0.001)
x0 = rbind(40, 0)
epslon = 0.0001
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
x1 = x0 - solve(t(f1(x0, x, y)))%*%f1(x0, x, y)%*%t(f1(x0, x, y))%*%f.obj(x0, x, y)
solve(t(f1(x0, x, y)))
solve(t(f1(x0,x,y))%*%f1(x0,x,y))%*%f1(x0,x,y)%*%t(f1(x0,x,y))%*%f.obj(x0,x,y)
solve(t(f1(x0,x,y))%*%f1(x0,x,y))
solve(t(f1(x0,x,y))%*%f1(x0,x,y))%*%f1(x0,x,y)
x1 = x0 - solve(t(f1(x0,x,y))%*%f1(x0,x,y))%*%t(f1(x0,x,y))%*%f.obj(x0,x,y)
solve(t(f1(x0,x,y))%*%f1(x0,x,y))
t(f1(x0,x,y))
f1(x0,x,y)
t(f1(x0,x,y))
solve(t(f1(x0,x,y))%*%f1(x0,x,y))
t(f1(x0,x,y))%*%f.obj(x0,x,y)
t(f1(x0,x,y))
f.obj(x0,x,y)
f <- function(b, x, y){
y - b[1]*exp(b[2]*x)
}
t(f1(x0,x,y))%*%f(x0,x,y)
solve(t(f1(x0,x,y))%*%f1(x0,x,y))%*%t(f1(x0,x,y))%*%f(x0,x,y)
Jr <- function(b, x, y){
rbind(-exp(b[2]*x),
-b[1]*x*exp(b[2]*x))
}
Jr(x0,x,y)
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))
t(Jr(x0,x,y))
Jr(x0,x,y)
Jr(x0,x,y)
Jr(x0,x,y)
t(Jr(x0,x,y))
t(Jr(x0,x,y))%*%Jr(x0,x,y)
ncol(t(Jr(x0,x,y))%*%Jr(x0,x,y))
nrow(t(Jr(x0,x,y))%*%Jr(x0,x,y))
solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))
x0 = c(50,0
)
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
t(Jr(x0,x,y))%*%Jr(x0,x,y)
Jr(x0,x,y)
x0
x0 = c(45, 2)
Jr(x0,x,y)
Jr(x0,x,y)
solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))
Jr(x0,x,y)
solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))
t(Jr(x0,x,y))%*%Jr(x0,x,y)
Jr <- function(b, x, y){
cbind(-exp(b[2]*x), -b[1]*x*exp(b[2]*x))
}
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
x1
gn.optim = function(x0, f1, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
cc = t(Jr(x1, x, y))%*%Jr(x1, x, y) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z)
}
gn.optim(x0 = rbind(40, 2), f1, f2, epslon = 0.001)
solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
gn.optim = function(x0, Jr, f, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
cc = t(Jr(x1, x, y))%*%Jr(x1, x, y) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z)
}
gn.optim(x0 = rbind(40, 2), Jr, f, epslon = 0.001)
gn.optim(x0 = rbind(40, -0.08), Jr, f, epslon = 0.001)
gn.optim = function(x0, Jr, f, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
cc = t(Jr(x1, x, y))%*%Jr(x1, x, y) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z, "iterações" = conta)
}
resposta = gn.optim(x0 = rbind(40, -0.08), Jr, f, epslon = 0.001)
resposta$arg.ot
resposta$seq.ot
resposta$iterações
gn.optim = function(x0, Jr, f, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(t(Jr(x0,x,y))%*%Jr(x0,x,y))%*%t(Jr(x0,x,y))%*%f(x0,x,y)
cc = sum((x1 - x0)^2) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z, "iterações" = conta)
}
resposta = gn.optim(x0 = rbind(40, -0.08), Jr, f, epslon = 0.001)
resposta$arg.ot
resposta$seq.ot
resposta$iterações
resposta = gn.optim(x0 = rbind(40, 2), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(40, 1), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(40, 0), Jr, f, epslon = 0.001)
resposta$arg.ot
resposta$seq.ot
resposta$iterações
resposta = gn.optim(x0 = rbind(10, 0), Jr, f, epslon = 0.001)
resposta$arg.ot
resposta$seq.ot
resposta$iterações
resposta = gn.optim(x0 = rbind(10, -10), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(10, -20), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(10, -5), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(10, -2), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(10, -1), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(10, 0), Jr, f, epslon = 0.001)
resposta$arg.ot
resposta$seq.ot
resposta$iterações
resposta = gn.optim(x0 = rbind(0, 0), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(1, 0), Jr, f, epslon = 0.001)
resposta = gn.optim(x0 = rbind(10, 0), Jr, f, epslon = 0.001)
resposta$arg.ot
resposta$seq.ot
resposta$iterações
reg = lm(log(y) ~ x)
c(exp(reg$coefficients[1]), reg$coefficients[2])
set.seed(1234)
n = 200 # tamanho da amostra
x = runif(200, 2, 40) # U(2, 40)
beta = c(60,-0.05) # valor verdadeiro dos coeficientes
e = rnorm(n, sd = 2)
y = beta[1]*exp(beta[2]*x) + e # y = b0e^b1X + e
plot(x,y)
ggplot2::ggplot() + geom_point(aes(x,y))
require(ggplot2)
require(ggplot2)
ggplot() + geom_point(aes(x,y))
ggplot() + geom_point(aes(x,y)) + theme_bw()
# valor inicial:
x0 = c(exp(reg$coefficients[1]), reg$coefficients[2])
set.seed(1234)
n = 200 # tamanho da amostra
x = runif(200, 2, 40) # U(2, 40)
beta = c(60,-0.05) # valor verdadeiro dos coeficientes
e = rnorm(n, sd = 2)
y = beta[1]*exp(beta[2]*x) + e # y = b0e^b1X + e
require(ggplot2)
ggplot() + geom_point(aes(x,y)) + theme_bw() # plotagem dos dados
nr.optim = function(x0, f1, f2, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(f2(x0, x, y))%*%(f1(x0, x, y))
cc = t(f1(x1, x, y))%*%f1(x1, x, y) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z)
}
# grandiente
f1 = function(b,x,y){
rbind(-2*sum((y - b[1]*exp(b[2]*x))*exp(b[2]*x)),
-2*sum((y - b[1]*exp(b[2]*x))*x*b[1]*exp(b[2]*x))
)
}
# hessiana
f2 = function(b,x,y){
A = matrix(0, ncol = 2,nrow = 2)
A[1,1] = sum(-2*exp(b[2]*x)*(-exp(b[2]*x)))
A[2,2] = sum(2*(-b[1]*x*exp(b[2]*x))*(-b[1]*x*exp(b[2]*x))) + sum(2*(y-b[1]*exp(b[2]*x))*(-b[1]*x^2*exp(b[2]*x)))
A[2,1] = A[1,2] = sum(2*(-b[1]*x*exp(b[2]*x))*(-exp(b[2]*x))) + sum(2*(y-b[1]*exp(b[2]*x))*(-x*exp(b[2]*x)))
return(A)
}
reg = lm(log(y) ~ x)
# valor inicial:
x0 = c(exp(reg$coefficients[1]), reg$coefficients[2])
nr.optim(x0, f1, f2, epslon = 0.001)
gn.optim(x0 = rbind(10, 0), J, r, epslon = 0.001)
gn.optim = function(x0, J, r, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(t(J(x0,x,y))%*%J(x0,x,y))%*%t(J(x0,x,y))%*%r(x0,x,y)
cc = sum((x1 - x0)^2) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z, "iterações" = conta)
}
# residuos:
r <- function(b, x, y){
y - b[1]*exp(b[2]*x)
}
# jacobiano:
J <- function(b, x, y){
cbind(-exp(b[2]*x), -b[1]*x*exp(b[2]*x))
}
gn.optim(x0 = rbind(10, 0), J, r, epslon = 0.001)
nr.optim = function(x0, f1, f2, epslon = 0.0001,...){
cc = 1
conta = 0
x0 = matrix(x0, ncol = 1)
z = x0
while(cc > epslon && conta < 1000){
x1 = x0 - solve(f2(x0, x, y))%*%(f1(x0, x, y))
cc = t(f1(x1, x, y))%*%f1(x1, x, y) # criteiro de convergencia
x0 = x1
conta = conta + 1
z = cbind(z,x1)
}
rownames(z) = paste("x", 1:nrow(x0), sep = "")
colnames(z) = paste("i", 1:(conta + 1), sep = "")
list("arg.ot" = x0, "seq.ot" = z, "iterações" = conta)
}
nr.optim(x0, f1, f2, epslon = 0.001)
gn.optim(x0 = rbind(10, 0), J, r, epslon = 0.001)
# Funcao para limpar um texto lido de um txt
# Entrada: vetor
# Saida: vetor
clean_text = function(text){
clean_text = trimws(toupper(gsub("[[:punct:]]|[0-9]*", "", text)))
clean_text = clean_text[clean_text != ""]
clean_text = clean_text[length(clean_text) >1]
clean_text = iconv(clean_text, from = "UTF-8", to = "ASCII//TRANSLIT")
clean_text = gsub("\"", "", clean_text)
clean_text = gsub("'", "", clean_text)
clean_text = gsub("-", " ", clean_text)
clean_text = clean_text[length(clean_text) >1]
return(clean_text)
}
## Funcao para ler texto em .txt
get_text = function(path){
text = readLines(path, encoding = 'UTF-8')
return(text)
}
# Funcao para limpar um texto em string
# Entrada: String
# Saida: String
clean_string = function(text){
clean_text = trimws(toupper(gsub("[[:punct:]]|[0-9]*", "", text)))
return(clean_text)
}
#
ref_txt = get_text('Guerra-e-Paz.txt')
text = ref_txt
head(text)
clean_text = trimws(toupper(gsub("[[:punct:]]|[0-9]*", "", text)))
head(text)
clean_text = clean_text[clean_text != ""]
head(text)
clean_text = clean_text[length(clean_text) >1]
head(text)
head(text)
clean_text = iconv(clean_text, from = "UTF-8", to = "ASCII//TRANSLIT")
head(text)
text = ref_txt
clean_text = trimws(toupper(gsub("[[:punct:]]|[0-9]*", "", text)))
clean_text = clean_text[clean_text != ""]
clean_text = clean_text[length(clean_text) >1]
clean_text = iconv(clean_text, from = "UTF-8", to = "ASCII//TRANSLIT")
clean_text = gsub("\"", "", clean_text)
clean_text = gsub("'", "", clean_text)
clean_text = gsub("-", " ", clean_text)
clean_text = clean_text[length(clean_text) >1]
head(clean_text)
text = ref_txt
clean_text = trimws(toupper(gsub("[[:punct:]]|[0-9]*", "", text)))
head(clean_text)
clean_text = clean_text[clean_text != ""]
head(clean_text)
clean_text = clean_text[length(clean_text) >1]
head(clean_text)
clean_text = iconv(clean_text, from = "UTF-8", to = "ASCII//TRANSLIT")
head(clean_text)
clean_text = gsub("\"", "", clean_text)
clean_text = gsub("'", "", clean_text)
clean_text = gsub("-", " ", clean_text)
clean_text = clean_text[length(clean_text) >1]
head(clean_text)
result_final = read.csv2("resultado_same_author.csv")
zero = result[result$text_accuracy == 0,]
View(result_final)
result$text_accuracy == 0
result = read.csv2("resultado_same_author.csv")
zero = result[result$text_accuracy == 0,]
zero
non_zero = result[result$text_accuracy != 0,]
non_zero
hist(non_zero$text_accuracy)
mean(non_zero$text_accuracy)
hist(result$f_max)
result_max_acc = result[result$text_accuracy == max(result$text_accuracy),]
result_max_acc
result_max_f = result[result$f_max == max(result$f_max),]
result_max_f
#install.packages("ggplot2")
library(ggplot2)
ggplot(result_final, aes(text_accuracy)) +
geom_histogram() +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
library(ggplot2)
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(binwidth = 8, color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(aes(bins = 8), color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(bins = 8, color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(bins = 12, color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(bins = 10, color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count")
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(bins = 10, color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = "Count") +
theme_bw()
ggplot(result_final, aes(text_accuracy)) +
geom_histogram(bins = 10, color = 'white') +
scale_x_continuous(name = "Acurácia do Texto") +
scale_y_continuous(name = NULL) +
theme_bw()
library(devtools) # carregando o pacote
library(roxygen2)
setwd("C:/Users/Juliana/Desktop/DecryptSubs")
setwd("C:/Users/Juliana/Desktop/DecryptSubs")
create("DecryptSubs")
